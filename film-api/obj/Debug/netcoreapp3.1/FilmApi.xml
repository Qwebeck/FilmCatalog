<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FilmApi</name>
    </assembly>
    <members>
        <member name="M:FilmApi.Controllers.CommentsController.PutComment(System.Int64,FilmApi.Models.CommentDTO)">
            <summary>
            Updates comment with given id
            </summary>
            <param name="id">ID of comment to update</param>
            <param name="comment">New comment content</param>
            <returns></returns>
            <response code="404">If comment wasn't found</response>
            <response code="400">If user is not authorized to access resource</response>
            <response code="204">If comment was successfully updated</response>   
        </member>
        <member name="M:FilmApi.Controllers.CommentsController.PostComment(FilmApi.Models.CommentDTO)">
            <summary>
            Adds new comment to film
            </summary>
            <param name="comment">Comment that should be added</param>
            <returns></returns>
        </member>
        <member name="M:FilmApi.Controllers.CommentsController.DeleteComment(System.Int64)">
            <summary>
            Removes comment with given id
            </summary>
            <param name="id">Id of comment to remove</param>
            <returns></returns>
            <response code="404">If comment wasn't found</response>
            <response code="400">If user is not authorized to access resource</response>
            <response code="200">If comment was successfully created</response>  
        </member>
        <member name="M:FilmApi.Controllers.FilmsController.GetFilms(System.Int32,System.Int32)">
            <summary>
            Returns `number` of films starting from the offset 
            </summary>
            <param name="number">Number of films to fetch</param>
            <param name="offset">Number of films to skip</param>
        </member>
        <member name="M:FilmApi.Controllers.FilmsController.GetGenres">
            <summary>
            Returns all existing genres
            </summary>
        </member>
        <member name="M:FilmApi.Controllers.FilmsController.FindByGenre(System.String[],System.String[],System.Int32,System.Int32)">
            <summary>
            Returns films, that matching given genres
            </summary>
            <param name="genres">Genres to which film should match</param>
            <param name="orderBy">Columns according to which result should be ordered</param>
            <param name="number">Number of films to return</param>
            <param name="offset">Number of films to skip</param>
            <returns></returns>
        </member>
        <member name="M:FilmApi.Controllers.FilmsController.FindByMark(System.Int32,System.Int32,System.String[],System.Int32,System.Int32)">
            <summary>
            Find films that have mark in specifed bounds
            </summary>
            <param name="lower">the lowest possible mark</param>
            <param name="upper">the highest possible mark</param>
            <param name="orderBy">columns to order by</param>
            <param name="number">Number of films to return</param>
            <param name="offset">Number of films to skip</param>
            <returns>Films which mark stays in bounds of lower and upper, orderedBy orderBy</returns>
        </member>
        <member name="M:FilmApi.Controllers.FilmsController.GetByTitle(System.String,System.Int32,System.Int32)">
            <summary>
            Returns films, title of witch contains provided subtitle
            </summary>
            <param name="title">String that should be in film title in order to return film</param>
            <param name="offset">Number of films to skip</param>
            <param name="number">Number of iflms to return</param>
            <returns></returns>
        </member>
        <member name="M:FilmApi.Controllers.FilmsController.GetFilm(System.Int64,System.Boolean)">
            <summary>
            Returns description of film with id
            </summary>
            <param name="id">id of film that should be described</param>
            <param name="includeComments">if True, appends comments to film description</param>
            <returns></returns>
        </member>
        <member name="M:FilmApi.Controllers.FilmsController.GetComments(System.Int64)">
            <summary>
            Return comments for given film
            </summary>
            <param name="id">Id of film, for which comments should be found</param>
            <returns></returns>
        </member>
        <member name="M:FilmApi.Controllers.FilmsController.GetMarks(System.Int64)">
            <summary>
            Returns user marks for film with filmID
            </summary>
            <param name="filmId"></param>
            <returns></returns>
        </member>
        <member name="M:FilmApi.Controllers.FilmsController.GetImage(System.Int64)">
            <summary>
            Returns images for film with given id
            </summary>
            <param name="id">id of film for which images should be fond</param>
            <returns></returns>
        </member>
        <member name="M:FilmApi.Controllers.FilmsController.PutFilm(System.Int64,FilmApi.Models.FilmDTO)">
            <summary>
            Updates film with given id
            </summary>
            <param name="id">id of film to update</param>
            <param name="film">new film description</param>
            <returns></returns>
        </member>
        <member name="M:FilmApi.Controllers.FilmsController.PostFilm(FilmApi.Models.FilmDTO)">
            <summary>
            Adds new Film to the collection
            </summary>
            <param name="content">Description of film that should be added</param>
            <returns></returns>
        </member>
        <member name="M:FilmApi.Controllers.FilmsController.DeleteFilm(System.Int64)">
            <summary>
            Deletes film with given id
            </summary>
            <param name="id">Id of film to delete</param>
            <returns></returns>
        </member>
        <member name="M:FilmApi.Controllers.FilmsController.MarkFilm(System.Int64,FilmApi.Models.MarkDTO)">
            <summary>
            Adds new mark for film or replace previous 
            </summary>
            <param name="id">id of film to mark</param>
            <param name="newMark">new value of mark</param>
            <returns></returns>
        </member>
        <member name="M:FilmApi.Controllers.FilmsController.filterFields(System.String[])">
            <summary>
            Select fields based that can be used to order films
            </summary>
            <param name="orderBy">fields given</param>
            <returns></returns>
        </member>
        <member name="M:FilmApi.Controllers.UsersController.PostUser(FilmApi.Models.UserDTO)">
            <summary>
            Adds new user
            </summary>
            <param name="user">Description of user that should be added</param>
            <returns></returns>
        </member>
        <member name="M:FilmApi.Controllers.UsersController.GetUsers">
            <summary>
            Returns all existing users
            </summary>
            <returns></returns>
        </member>
        <member name="M:FilmApi.Controllers.UsersController.GetUser(System.Int64)">
            <summary>
            Returns information about user with given id
            </summary>
            <param name="id">Id of user for which description should be found</param>
            <returns></returns>
        </member>
        <member name="M:FilmApi.Controllers.UsersController.PutUser(System.String,FilmApi.Models.UserDTO)">
            <summary>
            Updates information about user
            </summary>
            <param name="id">ID of user to update</param>
            <param name="user">New information about user</param>
            <returns></returns>
        </member>
        <member name="M:FilmApi.Controllers.UsersController.GetUserReviews(System.String)">
            <summary>
            Returns film reviews authored by user
            </summary>
            <param name="id">Id of review author</param>
            <returns></returns>
        </member>
        <member name="M:FilmApi.Controllers.UsersController.DeleteUser(System.String)">
            <summary>
            Deletes user with given id
            </summary>
            <param name="id">Id of user to remove</param>
            <returns></returns>
        </member>
        <member name="M:film_api.Controllers.ImagesController.GetImages(System.Int64[])">
            <summary>
            Returns images for films with given id
            </summary>
            <param name="filmIDs">Ids for which images should be returned</param>
            <returns></returns>
        </member>
    </members>
</doc>
